{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","id","name","username","email","react_default","a","createElement","className","alt","src","concat","height","width","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hasError","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3a386ff8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({id, name, username, email}) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} height=\"200\" width=\"200\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {  \n    return (\n        <div>\n        {\n            robots.map((user, i) => {\n        return (\n            <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                username={robots[i].username} \n                email={robots[i].email} />\n            );\n            })\n        }\n        </div>\n    );\n\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n        <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={ searchChange }\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n            { props.children }\n        </div>\n    )\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return (\n                <h1>Ooops. That is not good!</h1>\n            );\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState){\n        if (this.state.count !== nextState.count)\n        {\n            return true;\n        } \n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: this.state.count + 1}\n        })\n    }\n    render() {\n        console.log(\"CounterButton\");\n        return <button color={this.props.color} onClick={this.updateCount}>\n            Count: {this.state.count}\n        </button>\n\n    };\n};\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState){\n        return false;\n    }\n    render() {\n        console.log(\"Header\")\n\n        return (<div>\n            <h1 className='f1'>RoboFriends</h1>\n            <CounterButton color={'red'} />\n            \n        </div>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport './App.css';\n\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n\n    render() {\n\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n         })         \n         \n         return isPending ? \n            <h1>Loading</h1> :\n        (\n        <div className='tc'>\n            <Header />\n            <SearchBox searchChange={ onSearchChange }/>\n            <Scroll>\n                <ErrorBoundry>\n                    <CardList robots={ filteredRobots } />\n                </ErrorBoundry>\n            </Scroll>\n        </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n        return Object.assign({}, state, { searchField: action.payload });\n\n        default: \n        return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n        return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n        return Object.assign({}, state, { robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n        return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, \n    applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>, document.getElementById('root')\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}